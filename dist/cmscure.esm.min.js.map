{"version":3,"file":"cmscure.esm.min.js","sources":["../src/cmscure.js"],"sourcesContent":["/**\n * CMSCure JavaScript SDK\n * Official SDK for integrating CMSCure content management into web applications\n * \n * @version 1.0.0\n * @author CMSCure Team\n * @license MIT\n */\n\nclass CMSCureSDK extends EventTarget {\n  static #instance;\n\n  #config = null;\n  #authToken = null;\n  #cache = {};\n  #dataStoreCache = {};\n  #availableLanguages = ['en'];\n  #currentLanguage = 'en';\n  #isInitialized = false;\n  #serverUrl = 'https://app.cmscure.com';\n\n  constructor() {\n    super();\n    // Enforce singleton pattern to prevent multiple instances.\n    if (CMSCureSDK.#instance) {\n      console.log('[CMSCureSDK] Returning existing singleton instance.');\n      return CMSCureSDK.#instance;\n    }\n    CMSCureSDK.#instance = this;\n    console.log('[CMSCureSDK] Singleton instance created.');\n    this.#loadStateFromStorage();\n  }\n\n  /**\n     * Configures the SDK with project credentials and initializes authentication\n     * @param {object} config - Configuration object\n     * @param {string} config.projectId - Your project's unique ID\n     * @param {string} config.apiKey - Your project's API key\n     * @param {string} [config.defaultLanguage] - Optional default language\n     * @returns {Promise<void>}\n     */\n  async configure(config) {\n    if (this.#isInitialized) {\n      console.warn('[CMSCureSDK] SDK already configured.');\n      return;\n    }\n        \n    if (!config.projectId || !config.apiKey) {\n      console.error('[CMSCureSDK] Configuration failed: Project ID and API Key are required.');\n      return;\n    }\n        \n    this.#config = config;\n    this.#currentLanguage = config.defaultLanguage || this.#currentLanguage;\n        \n    console.log('[CMSCureSDK] Configuration set.');\n        \n    // Perform the initial sync\n    await this.#authenticateAndSync();\n    this.#isInitialized = true;\n  }\n\n  /**\n     * Gets the current language\n     * @returns {string} Current language code\n     */\n  getLanguage() {\n    return this.#currentLanguage;\n  }\n\n  /**\n     * Sets the current language and updates the UI\n     * @param {string} language - Language code to set\n     */\n  setLanguage(language) {\n    if (this.#availableLanguages.includes(language)) {\n      this.#currentLanguage = language;\n      localStorage.setItem('cmscure_current_language', language);\n      this.dispatchEvent(new CustomEvent('languageChanged', { detail: { language } }));\n      this.dispatchEvent(new CustomEvent('contentUpdated', { detail: { reason: 'LanguageChanged' } }));\n      console.log(`[CMSCureSDK] Language changed to: ${language}`);\n    } else {\n      console.warn(`[CMSCureSDK] Language '${language}' is not available.`);\n    }\n  }\n\n  /**\n     * Gets available languages\n     * @returns {string[]} Array of available language codes\n     */\n  getAvailableLanguages() {\n    return [...this.#availableLanguages];\n  }\n\n  /**\n     * Gets a translation for a specific key and tab\n     * @param {string} key - Translation key\n     * @param {string} tab - Tab name\n     * @returns {string} Translated text or fallback\n     */\n  translation(key, tab) {\n    const value = this.#cache[tab]?.[key]?.[this.#currentLanguage];\n    return value || `[${tab}:${key}]`;\n  }\n\n  /**\n     * Gets an image URL for a given key\n     * @param {string} key - Image key\n     * @returns {string|null} Image URL or null if not found\n     */\n  image(key) {\n    return this.#cache['__images__']?.[key]?.['url'] || null;\n  }\n\n  /**\n     * Gets a color value for a given key\n     * @param {string} key - Color key\n     * @returns {string|null} Color hex value or null if not found\n     */\n  color(key) {\n    return this.#cache['__colors__']?.[key]?.['hex'] || null;\n  }\n\n  /**\n     * Gets data store items by API identifier\n     * @param {string} apiIdentifier - Data store API identifier\n     * @returns {Array} Array of data store items\n     */\n  dataStore(apiIdentifier) {\n    return this.#dataStoreCache[apiIdentifier] || [];\n  }\n\n  // --- Private Methods ---\n\n  /**\n     * Loads cached state from localStorage\n     * @private\n     */\n  #loadStateFromStorage() {\n    try {\n      const token = localStorage.getItem('cmscure_auth_token');\n      const languages = localStorage.getItem('cmscure_available_languages');\n      const currentLang = localStorage.getItem('cmscure_current_language');\n      const cache = localStorage.getItem('cmscure_cache');\n      const dataStoreCache = localStorage.getItem('cmscure_datastore_cache');\n\n      if (token) this.#authToken = token;\n      if (languages) this.#availableLanguages = JSON.parse(languages);\n      if (currentLang) this.#currentLanguage = currentLang;\n      if (cache) this.#cache = JSON.parse(cache);\n      if (dataStoreCache) this.#dataStoreCache = JSON.parse(dataStoreCache);\n\n      console.log('[CMSCureSDK] Loaded state. Current language:', this.#currentLanguage);\n    } catch (error) {\n      console.error('[CMSCureSDK] Failed to load state from localStorage:', error);\n    }\n  }\n\n  /**\n     * Saves cache to localStorage\n     * @private\n     */\n  #saveCacheToStorage() {\n    try {\n      localStorage.setItem('cmscure_cache', JSON.stringify(this.#cache));\n      localStorage.setItem('cmscure_datastore_cache', JSON.stringify(this.#dataStoreCache));\n    } catch (error) {\n      console.error('[CMSCureSDK] Failed to save cache to localStorage:', error);\n    }\n  }\n\n  /**\n     * Authenticates with the server and syncs all content\n     * @private\n     */\n  async #authenticateAndSync() {\n    if (!this.#config) {\n      console.error('[CMSCureSDK] Configuration not set. Call configure() first.');\n      return;\n    }\n\n    try {\n      console.log('[CMSCureSDK] Authenticating...');\n            \n      const response = await fetch(`${this.#serverUrl}/api/sdk/auth`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          projectId: this.#config.projectId,\n          apiKey: this.#config.apiKey\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Authentication failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n            \n      if (!data.success) {\n        throw new Error('Authentication failed');\n      }\n\n      this.#authToken = data.token;\n      this.#availableLanguages = data.availableLanguages || ['en'];\n\n      // Save to localStorage\n      localStorage.setItem('cmscure_auth_token', this.#authToken);\n      localStorage.setItem('cmscure_available_languages', JSON.stringify(this.#availableLanguages));\n\n      console.log('[CMSCureSDK] Authentication successful. Available languages:', this.#availableLanguages);\n      console.log('[CMSCureSDK] Syncing all content...');\n\n      // Create a list of all sync operations to run in parallel\n      const syncPromises = [\n        ...data.tabs.map(tab => this.#syncTab(tab)),\n        ...data.stores.map(store => this.#syncStore(store)),\n        this.#syncColors(),\n        this.#syncImages(),\n      ];\n\n      // Wait for all syncs to complete\n      await Promise.all(syncPromises);\n\n      // After all data is fetched and the cache is updated, save it once\n      this.#saveCacheToStorage();\n            \n      // Dispatch a final event indicating the initial sync is complete\n      this.dispatchEvent(new CustomEvent('contentUpdated', { detail: { reason: 'InitialSyncComplete' } }));\n      console.log('[CMSCureSDK] Initial sync complete.');\n\n    } catch (error) {\n      console.error('[CMSCureSDK] Authentication or initial sync failed:', error);\n    }\n  }\n\n  /**\n     * Syncs translations for a specific tab\n     * @private\n     */\n  async #syncTab(tab) {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/translations/${this.#config.projectId}/${tab}`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${this.#authToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: this.#config.projectId,\n          tabName: tab\n        })\n      });\n            \n      if (response.status === 404) return; // No content for this tab, not an error\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n            \n      const data = await response.json();\n      const keyMap = {};\n      (data.keys || []).forEach(item => { keyMap[item.key] = item.values; });\n            \n      this.#cache[tab] = keyMap;\n      console.log(`[CMSCureSDK] Synced tab: ${tab}`);\n    } catch (error) {\n      console.error(`[CMSCureSDK] Failed to sync tab '${tab}':`, error);\n    }\n  }\n    \n  /**\n     * Syncs images from the server\n     * @private\n     */\n  async #syncImages() {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/images/${this.#config.projectId}`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${this.#authToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: this.#config.projectId\n        })\n      });\n            \n      if (response.status === 404) return; // No images, not an error\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n            \n      const data = await response.json();\n      const imageMap = {};\n      (data || []).forEach(item => { imageMap[item.key] = { url: item.url }; });\n            \n      this.#cache['__images__'] = imageMap;\n      console.log('[CMSCureSDK] Synced images.');\n    } catch (error) {\n      console.error('[CMSCureSDK] Failed to sync images:', error);\n    }\n  }\n\n  /**\n     * Syncs colors from the server\n     * @private\n     */\n  async #syncColors() {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/colors/${this.#config.projectId}`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${this.#authToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: this.#config.projectId\n        })\n      });\n            \n      if (response.status === 404) return; // No colors, not an error\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n            \n      const data = await response.json();\n      const colorMap = {};\n      (data || []).forEach(item => { colorMap[item.key] = { hex: item.value }; });\n            \n      this.#cache['__colors__'] = colorMap;\n      console.log('[CMSCureSDK] Synced colors.');\n    } catch (error) {\n      console.error('[CMSCureSDK] Failed to sync colors:', error);\n    }\n  }\n    \n  /**\n     * Syncs data store by API identifier\n     * @private\n     */\n  async #syncStore(apiIdentifier) {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/store/${this.#config.projectId}/${apiIdentifier}`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${this.#authToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: this.#config.projectId,\n          apiIdentifier: apiIdentifier\n        })\n      });\n            \n      if (response.status === 404) return; // No content, not an error\n      if (!response.ok) throw new Error(`HTTP error ${response.status}`);\n\n      const data = await response.json();\n      this.#dataStoreCache[apiIdentifier] = data.items || [];\n      console.log(`[CMSCureSDK] Synced data store: ${apiIdentifier}`);\n    } catch (error) {\n      console.error(`[CMSCureSDK] Failed to sync data store '${apiIdentifier}':`, error);\n    }\n  }\n}\n\n// For ES module environments\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = CMSCureSDK;\n}\n\n// For AMD/RequireJS environments\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return CMSCureSDK;\n  });\n}\n\n// For browser environments (UMD)\nif (typeof window !== 'undefined') {\n  window.CMSCureSDK = CMSCureSDK;\n}\n"],"names":["CMSCureSDK","EventTarget","static","config","authToken","cache","dataStoreCache","availableLanguages","currentLanguage","isInitialized","serverUrl","constructor","super","instance","console","log","this","loadStateFromStorage","configure","warn","projectId","apiKey","defaultLanguage","authenticateAndSync","error","getLanguage","setLanguage","language","includes","localStorage","setItem","dispatchEvent","CustomEvent","detail","reason","getAvailableLanguages","translation","key","tab","value","image","color","dataStore","apiIdentifier","token","getItem","languages","currentLang","JSON","parse","saveCacheToStorage","stringify","response","fetch","method","headers","body","ok","Error","status","data","json","success","syncPromises","tabs","map","syncTab","stores","store","syncStore","syncColors","syncImages","Promise","all","Authorization","tabName","keyMap","keys","forEach","item","values","imageMap","url","colorMap","hex","items","module","exports","window"],"mappings":"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"}