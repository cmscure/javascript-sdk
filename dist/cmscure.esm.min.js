function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var t={exports:{}};
/**
 * CMSCure JavaScript SDK
 * Official SDK for integrating CMSCure content management into web applications
 * 
 * @version 1.0.0
 * @author CMSCure Team
 * @license MIT
 */!function(e){class t extends EventTarget{static#e;#t=null;#a=null;#o={};#r={};#n=["en"];#s="en";#c=!1;#i="https://app.cmscure.com";constructor(){if(super(),t.#e)return console.log("[CMSCureSDK] Returning existing singleton instance."),t.#e;t.#e=this,console.log("[CMSCureSDK] Singleton instance created."),this.#l()}async configure(e){this.#c?console.warn("[CMSCureSDK] SDK already configured."):e.projectId&&e.apiKey?(this.#t=e,this.#s=e.defaultLanguage||this.#s,console.log("[CMSCureSDK] Configuration set."),await this.#u(),this.#c=!0):console.error("[CMSCureSDK] Configuration failed: Project ID and API Key are required.")}getLanguage(){return this.#s}setLanguage(e){this.#n.includes(e)?(this.#s=e,localStorage.setItem("cmscure_current_language",e),this.dispatchEvent(new CustomEvent("languageChanged",{detail:{language:e}})),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"LanguageChanged"}})),console.log(`[CMSCureSDK] Language changed to: ${e}`)):console.warn(`[CMSCureSDK] Language '${e}' is not available.`)}getAvailableLanguages(){return[...this.#n]}translation(e,t){const a=this.#o[t]?.[e]?.[this.#s];return a||`[${t}:${e}]`}image(e){return this.#o.__images__?.[e]?.url||null}color(e){return this.#o.__colors__?.[e]?.hex||null}dataStore(e){return this.#r[e]||[]}#l(){try{const e=localStorage.getItem("cmscure_auth_token"),t=localStorage.getItem("cmscure_available_languages"),a=localStorage.getItem("cmscure_current_language"),o=localStorage.getItem("cmscure_cache"),r=localStorage.getItem("cmscure_datastore_cache");e&&(this.#a=e),t&&(this.#n=JSON.parse(t)),a&&(this.#s=a),o&&(this.#o=JSON.parse(o)),r&&(this.#r=JSON.parse(r)),console.log("[CMSCureSDK] Loaded state. Current language:",this.#s)}catch(e){console.error("[CMSCureSDK] Failed to load state from localStorage:",e)}}#h(){try{localStorage.setItem("cmscure_cache",JSON.stringify(this.#o)),localStorage.setItem("cmscure_datastore_cache",JSON.stringify(this.#r))}catch(e){console.error("[CMSCureSDK] Failed to save cache to localStorage:",e)}}async#u(){if(this.#t)try{console.log("[CMSCureSDK] Authenticating...");const e=await fetch(`${this.#i}/api/sdk/auth`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId,apiKey:this.#t.apiKey})});if(!e.ok)throw new Error(`Authentication failed: ${e.status}`);const t=await e.json();if(!t.success)throw new Error("Authentication failed");this.#a=t.token,this.#n=t.availableLanguages||["en"],localStorage.setItem("cmscure_auth_token",this.#a),localStorage.setItem("cmscure_available_languages",JSON.stringify(this.#n)),console.log("[CMSCureSDK] Authentication successful. Available languages:",this.#n),console.log("[CMSCureSDK] Syncing all content...");const a=[...t.tabs.map(e=>this.#g(e)),...t.stores.map(e=>this.#S(e)),this.#d(),this.#C()];await Promise.all(a),this.#h(),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"InitialSyncComplete"}})),console.log("[CMSCureSDK] Initial sync complete.")}catch(e){console.error("[CMSCureSDK] Authentication or initial sync failed:",e)}else console.error("[CMSCureSDK] Configuration not set. Call configure() first.")}async#g(e){try{const t=await fetch(`${this.#i}/api/sdk/translations/${this.#t.projectId}/${e}`,{method:"POST",headers:{Authorization:`Bearer ${this.#a}`,"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId,tabName:e})});if(404===t.status)return;if(!t.ok)throw new Error(`HTTP error ${t.status}`);const a=await t.json(),o={};(a.keys||[]).forEach(e=>{o[e.key]=e.values}),this.#o[e]=o,console.log(`[CMSCureSDK] Synced tab: ${e}`)}catch(t){console.error(`[CMSCureSDK] Failed to sync tab '${e}':`,t)}}async#C(){try{const e=await fetch(`${this.#i}/api/sdk/images/${this.#t.projectId}`,{method:"POST",headers:{Authorization:`Bearer ${this.#a}`,"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId})});if(404===e.status)return;if(!e.ok)throw new Error(`HTTP error ${e.status}`);const t=await e.json(),a={};(t||[]).forEach(e=>{a[e.key]={url:e.url}}),this.#o.__images__=a,console.log("[CMSCureSDK] Synced images.")}catch(e){console.error("[CMSCureSDK] Failed to sync images:",e)}}async#d(){try{const e=await fetch(`${this.#i}/api/sdk/colors/${this.#t.projectId}`,{method:"POST",headers:{Authorization:`Bearer ${this.#a}`,"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId})});if(404===e.status)return;if(!e.ok)throw new Error(`HTTP error ${e.status}`);const t=await e.json(),a={};(t||[]).forEach(e=>{a[e.key]={hex:e.value}}),this.#o.__colors__=a,console.log("[CMSCureSDK] Synced colors.")}catch(e){console.error("[CMSCureSDK] Failed to sync colors:",e)}}async#S(e){try{const t=await fetch(`${this.#i}/api/sdk/store/${this.#t.projectId}/${e}`,{method:"POST",headers:{Authorization:`Bearer ${this.#a}`,"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId,apiIdentifier:e})});if(404===t.status)return;if(!t.ok)throw new Error(`HTTP error ${t.status}`);const a=await t.json();this.#r[e]=a.items||[],console.log(`[CMSCureSDK] Synced data store: ${e}`)}catch(t){console.error(`[CMSCureSDK] Failed to sync data store '${e}':`,t)}}}e.exports&&(e.exports=t),"undefined"!=typeof window&&(window.CMSCureSDK=t)}(t);var a=e(t.exports);export{a as default};
//# sourceMappingURL=cmscure.esm.min.js.map
