function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var a={exports:{}};
/**
 * CMSCure JavaScript SDK
 * Official SDK for integrating CMSCure content management into web applications
 * 
 * @version 1.2.6
 * @author CMSCure Team
 * @license MIT
 */!function(e,a){class t extends EventTarget{static#e;#a=null;#t=null;#s={};#n={};#o=["en"];#r="en";#c=!1;#i="https://gateway.cmscure.com";constructor(){if(super(),t.#e)return console.log("[CMSCureSDK] Returning existing singleton instance."),t.#e;t.#e=this,console.log("[CMSCureSDK] Singleton instance created."),this.#l()}async configure(e){this.#c?console.warn("[CMSCureSDK] SDK already configured."):e.projectId&&e.apiKey?(this.#a=e,this.#r=e.defaultLanguage||this.#r,console.log("[CMSCureSDK] Configuration set."),await this.#u(),this.#c=!0):console.error("[CMSCureSDK] Configuration failed: Project ID and API Key are required.")}getLanguage(){return this.#r}setLanguage(e){this.#o.includes(e)?(this.#r=e,localStorage.setItem("cmscure_current_language",e),this.dispatchEvent(new CustomEvent("languageChanged",{detail:{language:e}})),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"LanguageChanged"}})),console.log(`[CMSCureSDK] Language changed to: ${e}`)):console.warn(`[CMSCureSDK] Language '${e}' is not available.`)}getAvailableLanguages(){return this.#o}translation(e,a){const t=this.#s[a]?.[this.#r]?.[e];return t||`[${e}]`}color(e){const a=this.#s.__colors__?.[e];return"string"==typeof a?a:"object"==typeof a&&null!==a&&(a.hex||a.value||a.color)||null}image(e){return this.#s.__images__?.[e]||null}dataStore(e){return this.#n[e]||[]}async refresh(){this.#a?(console.log("[CMSCureSDK] Refreshing content..."),await this.#u(),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"Manual refresh"}}))):console.warn("[CMSCureSDK] Cannot refresh: SDK not configured")}#l(){try{const e=localStorage.getItem("cmscure_auth_token"),a=localStorage.getItem("cmscure_available_languages"),t=localStorage.getItem("cmscure_current_language"),s=localStorage.getItem("cmscure_cache"),n=localStorage.getItem("cmscure_datastore_cache");e&&(this.#t=e),a&&(this.#o=JSON.parse(a)),t&&this.#o.includes(t)&&(this.#r=t),s&&(this.#s=JSON.parse(s)),n&&(this.#n=JSON.parse(n)),console.log(`[CMSCureSDK] Loaded state. Current language: ${this.#r}`)}catch(e){console.warn("[CMSCureSDK] Failed to load cached state:",e.message)}}#g(){try{this.#t&&localStorage.setItem("cmscure_auth_token",this.#t),localStorage.setItem("cmscure_available_languages",JSON.stringify(this.#o)),localStorage.setItem("cmscure_current_language",this.#r),localStorage.setItem("cmscure_cache",JSON.stringify(this.#s)),localStorage.setItem("cmscure_datastore_cache",JSON.stringify(this.#n))}catch(e){console.warn("[CMSCureSDK] Failed to save state:",e.message)}}async#u(){if(this.#a)try{console.log("[CMSCureSDK] Authenticating...");const e=await fetch(`${this.#i}/api/sdk/auth`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#a.projectId,apiKey:this.#a.apiKey})});if(!e.ok)throw new Error(`Authentication failed: ${e.status}`);const a=await e.json();if(!a.success)throw new Error("Authentication failed");this.#t=a.token,this.#o=a.availableLanguages||["en"],localStorage.setItem("cmscure_auth_token",this.#t),localStorage.setItem("cmscure_available_languages",JSON.stringify(this.#o)),console.log("[CMSCureSDK] Authentication successful. Available languages:",this.#o),console.log("[CMSCureSDK] Syncing all content...");const t=[...a.tabs.map(e=>this.#h(e)),...a.stores.map(e=>this.#S(e)),this.#d(),this.#C()];await Promise.all(t),console.log("[CMSCureSDK] Initial sync complete."),this.#g(),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"Initial sync"}}))}catch(e){throw console.error("[CMSCureSDK] Authentication or sync failed:",e.message),e}else console.error("[CMSCureSDK] Configuration not set. Call configure() first.")}async#h(e){try{const a=await fetch(`${this.#i}/api/sdk/translations/${this.#a.projectId}/${e}`,{headers:{Authorization:`Bearer ${this.#t}`}});if(a.ok){const t=await a.json();this.#s[e]||(this.#s[e]={}),t.keys&&Array.isArray(t.keys)&&t.keys.forEach(a=>{const{key:t,values:s}=a;Object.keys(s).forEach(a=>{this.#s[e][a]||(this.#s[e][a]={}),this.#s[e][a][t]=s[a]})}),console.log(`[CMSCureSDK] Synced tab: ${e}`)}else console.warn(`[CMSCureSDK] Failed to sync tab ${e}: ${a.status}`)}catch(a){console.error(`[CMSCureSDK] Error syncing tab ${e}:`,a.message)}}async#C(){try{const e=await fetch(`${this.#i}/api/sdk/images/${this.#a.projectId}`,{headers:{Authorization:`Bearer ${this.#t}`}});if(e.ok){const a=await e.json(),t={};Array.isArray(a)?a.forEach(e=>{e.key&&e.url&&(t[e.key]=e.url)}):Object.assign(t,a),this.#s.__images__=t,console.log("[CMSCureSDK] Synced images:",t)}else console.warn(`[CMSCureSDK] Failed to sync images: ${e.status}`)}catch(e){console.error("[CMSCureSDK] Error syncing images:",e.message)}}async#d(){try{const e=await fetch(`${this.#i}/api/sdk/colors/${this.#a.projectId}`,{headers:{Authorization:`Bearer ${this.#t}`}});if(e.ok){const a=await e.json(),t={};Array.isArray(a)?a.forEach(e=>{e.key&&e.value&&(t[e.key]=e.value)}):Object.assign(t,a),this.#s.__colors__=t,console.log("[CMSCureSDK] Synced colors:",t)}else console.warn(`[CMSCureSDK] Failed to sync colors: ${e.status}`)}catch(e){console.error("[CMSCureSDK] Error syncing colors:",e.message)}}async#S(e){try{const a=await fetch(`${this.#i}/api/sdk/store/${this.#a.projectId}/${e}`,{headers:{Authorization:`Bearer ${this.#t}`}});if(a.ok){const t=await a.json();this.#n[e]=t,console.log(`[CMSCureSDK] Synced data store: ${e}`)}else console.warn(`[CMSCureSDK] Failed to sync data store ${e}: ${a.status}`)}catch(a){console.error(`[CMSCureSDK] Error syncing data store ${e}:`,a.message)}}}"undefined"!=typeof window&&(window.CMSCureSDK=t),e.exports&&(e.exports=t),a.default=t}(a,a.exports);var t=e(a.exports);export{t as default};
//# sourceMappingURL=cmscure.esm.min.js.map
