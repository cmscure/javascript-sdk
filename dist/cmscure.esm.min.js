function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var t={exports:{}};
/**
 * CMSCure JavaScript SDK
 * Official SDK for integrating CMSCure content management into web applications
 * 
 * @version 1.2.1
 * @author CMSCure Team
 * @license MIT
 */!function(e,t){class a extends EventTarget{static#e;#t=null;#a=null;#s={};#n={};#o=["en"];#r="en";#c=!1;#i="https://app.cmscure.com";constructor(){if(super(),a.#e)return console.log("[CMSCureSDK] Returning existing singleton instance."),a.#e;a.#e=this,console.log("[CMSCureSDK] Singleton instance created."),this.#l()}async configure(e){this.#c?console.warn("[CMSCureSDK] SDK already configured."):e.projectId&&e.apiKey?(this.#t=e,this.#r=e.defaultLanguage||this.#r,console.log("[CMSCureSDK] Configuration set."),await this.#u(),this.#c=!0):console.error("[CMSCureSDK] Configuration failed: Project ID and API Key are required.")}getLanguage(){return this.#r}setLanguage(e){this.#o.includes(e)?(this.#r=e,localStorage.setItem("cmscure_current_language",e),this.dispatchEvent(new CustomEvent("languageChanged",{detail:{language:e}})),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"LanguageChanged"}})),console.log(`[CMSCureSDK] Language changed to: ${e}`)):console.warn(`[CMSCureSDK] Language '${e}' is not available.`)}getAvailableLanguages(){return this.#o}translation(e,t){const a=this.#s[t]?.[this.#r]?.[e];return a||`[${e}]`}color(e){const t=this.#s.__colors__?.[e];return"string"==typeof t?t:"object"==typeof t&&null!==t&&(t.hex||t.value||t.color)||null}image(e){return this.#s.__images__?.[e]||null}dataStore(e){return this.#n[e]||[]}async refresh(){this.#t?(console.log("[CMSCureSDK] Refreshing content..."),await this.#u(),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"Manual refresh"}}))):console.warn("[CMSCureSDK] Cannot refresh: SDK not configured")}#l(){try{const e=localStorage.getItem("cmscure_auth_token"),t=localStorage.getItem("cmscure_available_languages"),a=localStorage.getItem("cmscure_current_language"),s=localStorage.getItem("cmscure_cache"),n=localStorage.getItem("cmscure_datastore_cache");e&&(this.#a=e),t&&(this.#o=JSON.parse(t)),a&&this.#o.includes(a)&&(this.#r=a),s&&(this.#s=JSON.parse(s)),n&&(this.#n=JSON.parse(n)),console.log(`[CMSCureSDK] Loaded state. Current language: ${this.#r}`)}catch(e){console.warn("[CMSCureSDK] Failed to load cached state:",e.message)}}#g(){try{this.#a&&localStorage.setItem("cmscure_auth_token",this.#a),localStorage.setItem("cmscure_available_languages",JSON.stringify(this.#o)),localStorage.setItem("cmscure_current_language",this.#r),localStorage.setItem("cmscure_cache",JSON.stringify(this.#s)),localStorage.setItem("cmscure_datastore_cache",JSON.stringify(this.#n))}catch(e){console.warn("[CMSCureSDK] Failed to save state:",e.message)}}async#u(){if(this.#t)try{console.log("[CMSCureSDK] Authenticating...");const e=await fetch(`${this.#i}/api/sdk/auth`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({projectId:this.#t.projectId,apiKey:this.#t.apiKey})});if(!e.ok)throw new Error(`Authentication failed: ${e.status}`);const t=await e.json();if(!t.success)throw new Error("Authentication failed");this.#a=t.token,this.#o=t.availableLanguages||["en"],localStorage.setItem("cmscure_auth_token",this.#a),localStorage.setItem("cmscure_available_languages",JSON.stringify(this.#o)),console.log("[CMSCureSDK] Authentication successful. Available languages:",this.#o),console.log("[CMSCureSDK] Syncing all content...");const a=[...t.tabs.map(e=>this.#h(e)),...t.stores.map(e=>this.#S(e)),this.#d(),this.#C()];await Promise.all(a),console.log("[CMSCureSDK] Initial sync complete."),this.#g(),this.dispatchEvent(new CustomEvent("contentUpdated",{detail:{reason:"Initial sync"}}))}catch(e){throw console.error("[CMSCureSDK] Authentication or sync failed:",e.message),e}else console.error("[CMSCureSDK] Configuration not set. Call configure() first.")}async#h(e){try{const t=await fetch(`${this.#i}/api/sdk/translations/${this.#t.projectId}/${e}`,{headers:{Authorization:`Bearer ${this.#a}`}});if(t.ok){const a=await t.json();this.#s[e]||(this.#s[e]={}),Object.keys(a).forEach(t=>{this.#s[e][t]=a[t]}),console.log(`[CMSCureSDK] Synced tab: ${e}`)}else console.warn(`[CMSCureSDK] Failed to sync tab ${e}: ${t.status}`)}catch(t){console.error(`[CMSCureSDK] Error syncing tab ${e}:`,t.message)}}async#C(){try{const e=await fetch(`${this.#i}/api/sdk/images/${this.#t.projectId}`,{headers:{Authorization:`Bearer ${this.#a}`}});if(e.ok){const t=await e.json();this.#s.__images__=t,console.log("[CMSCureSDK] Synced images.")}else console.warn(`[CMSCureSDK] Failed to sync images: ${e.status}`)}catch(e){console.error("[CMSCureSDK] Error syncing images:",e.message)}}async#d(){try{const e=await fetch(`${this.#i}/api/sdk/colors/${this.#t.projectId}`,{headers:{Authorization:`Bearer ${this.#a}`}});if(e.ok){const t=await e.json();this.#s.__colors__=t,console.log("[CMSCureSDK] Synced colors.")}else console.warn(`[CMSCureSDK] Failed to sync colors: ${e.status}`)}catch(e){console.error("[CMSCureSDK] Error syncing colors:",e.message)}}async#S(e){try{const t=await fetch(`${this.#i}/api/sdk/store/${this.#t.projectId}/${e}`,{headers:{Authorization:`Bearer ${this.#a}`}});if(t.ok){const a=await t.json();this.#n[e]=a,console.log(`[CMSCureSDK] Synced data store: ${e}`)}else console.warn(`[CMSCureSDK] Failed to sync data store ${e}: ${t.status}`)}catch(t){console.error(`[CMSCureSDK] Error syncing data store ${e}:`,t.message)}}}"undefined"!=typeof window&&(window.CMSCureSDK=a),e.exports&&(e.exports=a),t.default=a}(t,t.exports);var a=e(t.exports);export{a as default};
//# sourceMappingURL=cmscure.esm.min.js.map
