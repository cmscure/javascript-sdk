{"version":3,"file":"cmscure.umd.min.js","sources":["../src/cmscure.js"],"sourcesContent":["/**\n * CMSCure JavaScript SDK\n * Official SDK for integrating CMSCure content management into web applications\n * \n * @version 1.2.4\n * @author CMSCure Team\n * @license MIT\n */\n\nclass CMSCureSDK extends EventTarget {\n  static #instance;\n\n  #config = null;\n  #authToken = null;\n  #cache = {};\n  #dataStoreCache = {};\n  #availableLanguages = ['en'];\n  #currentLanguage = 'en';\n  #isInitialized = false;\n  #serverUrl = 'https://gateway.cmscure.com';\n\n  constructor() {\n    super();\n    // Enforce singleton pattern to prevent multiple instances.\n    if (CMSCureSDK.#instance) {\n      console.log('[CMSCureSDK] Returning existing singleton instance.');\n      return CMSCureSDK.#instance;\n    }\n    CMSCureSDK.#instance = this;\n    console.log('[CMSCureSDK] Singleton instance created.');\n    this.#loadStateFromStorage();\n  }\n\n  /**\n   * Configures the SDK with project credentials and initializes authentication\n   * @param {Object} config - Configuration object\n   * @param {string} config.projectId - Your project ID from CMSCure Dashboard\n   * @param {string} config.apiKey - Your API key from CMSCure Dashboard\n   * @param {string} [config.defaultLanguage='en'] - Default language code\n   * @returns {Promise<void>}\n   */\n  async configure(config) {\n    if (this.#isInitialized) {\n      console.warn('[CMSCureSDK] SDK already configured.');\n      return;\n    }\n        \n    if (!config.projectId || !config.apiKey) {\n      console.error('[CMSCureSDK] Configuration failed: Project ID and API Key are required.');\n      return;\n    }\n        \n    this.#config = config;\n    this.#currentLanguage = config.defaultLanguage || this.#currentLanguage;\n        \n    console.log('[CMSCureSDK] Configuration set.');\n        \n    // Perform the initial sync\n    await this.#authenticateAndSync();\n    \n    this.#isInitialized = true;\n  }\n\n  /**\n   * Gets the current language\n   * @returns {string} Current language code\n   */\n  getLanguage() {\n    return this.#currentLanguage;\n  }\n\n  /**\n   * Sets the current language and updates the UI\n   * @param {string} language - Language code to set\n   */\n  setLanguage(language) {\n    if (this.#availableLanguages.includes(language)) {\n      this.#currentLanguage = language;\n      localStorage.setItem('cmscure_current_language', language);\n      this.dispatchEvent(new CustomEvent('languageChanged', { detail: { language } }));\n      this.dispatchEvent(new CustomEvent('contentUpdated', { detail: { reason: 'LanguageChanged' } }));\n      console.log(`[CMSCureSDK] Language changed to: ${language}`);\n    } else {\n      console.warn(`[CMSCureSDK] Language '${language}' is not available.`);\n    }\n  }\n\n  /**\n   * Gets all available languages\n   * @returns {string[]} Array of available language codes\n   */\n  getAvailableLanguages() {\n    return this.#availableLanguages;\n  }\n\n  /**\n   * Gets a translation for a specific key and tab\n   * @param {string} key - Translation key\n   * @param {string} tab - Tab name (e.g., 'common', 'homepage')\n   * @returns {string} Translated string or key if not found\n   */\n  translation(key, tab) {\n    const value = this.#cache[tab]?.[this.#currentLanguage]?.[key];\n    return value || `[${key}]`;\n  }\n\n  /**\n   * Gets a color value by key\n   * @param {string} key - Color key\n   * @returns {string|null} Color value or null if not found\n   */\n  color(key) {\n    const colorData = this.#cache['__colors__']?.[key];\n    \n    // Handle different color data formats\n    if (typeof colorData === 'string') {\n      return colorData; // Direct color string\n    }\n    if (typeof colorData === 'object' && colorData !== null) {\n      return colorData.hex || colorData.value || colorData.color || null;\n    }\n    \n    return null;\n  }\n\n  /**\n   * Gets an image URL by key\n   * @param {string} key - Image key\n   * @returns {string|null} Image URL or null if not found\n   */\n  image(key) {\n    return this.#cache['__images__']?.[key] || null;\n  }\n\n  /**\n   * Gets data store items by API identifier\n   * @param {string} apiIdentifier - Data store API identifier\n   * @returns {Array} Array of data store items\n   */\n  dataStore(apiIdentifier) {\n    return this.#dataStoreCache[apiIdentifier] || [];\n  }\n\n  /**\n   * Forces a refresh of all content\n   * @returns {Promise<void>}\n   */\n  async refresh() {\n    if (!this.#config) {\n      console.warn('[CMSCureSDK] Cannot refresh: SDK not configured');\n      return;\n    }\n    \n    console.log('[CMSCureSDK] Refreshing content...');\n    await this.#authenticateAndSync();\n    this.dispatchEvent(new CustomEvent('contentUpdated', { detail: { reason: 'Manual refresh' } }));\n  }\n\n  /**\n   * Loads cached state from localStorage\n   * @private\n   */\n  #loadStateFromStorage() {\n    try {\n      // Load cached auth token\n      const token = localStorage.getItem('cmscure_auth_token');\n      const languages = localStorage.getItem('cmscure_available_languages');\n      const currentLang = localStorage.getItem('cmscure_current_language');\n      const cacheData = localStorage.getItem('cmscure_cache');\n      const dataStoreCacheData = localStorage.getItem('cmscure_datastore_cache');\n\n      if (token) this.#authToken = token;\n      if (languages) this.#availableLanguages = JSON.parse(languages);\n      if (currentLang && this.#availableLanguages.includes(currentLang)) {\n        this.#currentLanguage = currentLang;\n      }\n      if (cacheData) this.#cache = JSON.parse(cacheData);\n      if (dataStoreCacheData) this.#dataStoreCache = JSON.parse(dataStoreCacheData);\n\n      console.log(`[CMSCureSDK] Loaded state. Current language: ${this.#currentLanguage}`);\n    } catch (error) {\n      console.warn('[CMSCureSDK] Failed to load cached state:', error.message);\n    }\n  }\n\n  /**\n   * Saves current state to localStorage\n   * @private\n   */\n  #saveStateToStorage() {\n    try {\n      if (this.#authToken) localStorage.setItem('cmscure_auth_token', this.#authToken);\n      localStorage.setItem('cmscure_available_languages', JSON.stringify(this.#availableLanguages));\n      localStorage.setItem('cmscure_current_language', this.#currentLanguage);\n      localStorage.setItem('cmscure_cache', JSON.stringify(this.#cache));\n      localStorage.setItem('cmscure_datastore_cache', JSON.stringify(this.#dataStoreCache));\n    } catch (error) {\n      console.warn('[CMSCureSDK] Failed to save state:', error.message);\n    }\n  }\n\n  /**\n   * Authenticates with the server and syncs all content\n   * @private\n   */\n  async #authenticateAndSync() {\n    if (!this.#config) {\n      console.error('[CMSCureSDK] Configuration not set. Call configure() first.');\n      return;\n    }\n\n    try {\n      console.log('[CMSCureSDK] Authenticating...');\n            \n      const response = await fetch(`${this.#serverUrl}/api/sdk/auth`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          projectId: this.#config.projectId,\n          apiKey: this.#config.apiKey\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Authentication failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n            \n      if (!data.success) {\n        throw new Error('Authentication failed');\n      }\n\n      this.#authToken = data.token;\n      this.#availableLanguages = data.availableLanguages || ['en'];\n\n      // Save to localStorage\n      localStorage.setItem('cmscure_auth_token', this.#authToken);\n      localStorage.setItem('cmscure_available_languages', JSON.stringify(this.#availableLanguages));\n\n      console.log('[CMSCureSDK] Authentication successful. Available languages:', this.#availableLanguages);\n      console.log('[CMSCureSDK] Syncing all content...');\n\n      // Create a list of all sync operations to run in parallel\n      const syncPromises = [\n        ...data.tabs.map(tab => this.#syncTab(tab)),\n        ...data.stores.map(store => this.#syncStore(store)),\n        this.#syncColors(),\n        this.#syncImages()\n      ];\n\n      await Promise.all(syncPromises);\n            \n      console.log('[CMSCureSDK] Initial sync complete.');\n      this.#saveStateToStorage();\n      this.dispatchEvent(new CustomEvent('contentUpdated', { detail: { reason: 'Initial sync' } }));\n            \n    } catch (error) {\n      console.error('[CMSCureSDK] Authentication or sync failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Syncs translations for a specific tab\n   * @private\n   */\n  async #syncTab(tab) {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/translations/${this.#config.projectId}/${tab}`, {\n        headers: { 'Authorization': `Bearer ${this.#authToken}` }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (!this.#cache[tab]) this.#cache[tab] = {};\n        \n        // Process the keys array from API response\n        if (data.keys && Array.isArray(data.keys)) {\n          data.keys.forEach(keyObj => {\n            const { key, values } = keyObj;\n            // Restructure: values = {en: \"value\", fr: \"valeur\"} \n            // Into: cache[tab][lang][key] = value\n            Object.keys(values).forEach(lang => {\n              if (!this.#cache[tab][lang]) this.#cache[tab][lang] = {};\n              this.#cache[tab][lang][key] = values[lang];\n            });\n          });\n        }\n        \n        console.log(`[CMSCureSDK] Synced tab: ${tab}`);\n      } else {\n        console.warn(`[CMSCureSDK] Failed to sync tab ${tab}: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(`[CMSCureSDK] Error syncing tab ${tab}:`, error.message);\n    }\n  }\n\n  /**\n   * Syncs images from server\n   * @private\n   */\n  async #syncImages() {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/images/${this.#config.projectId}`, {\n        headers: { 'Authorization': `Bearer ${this.#authToken}` }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.#cache['__images__'] = data;\n        console.log('[CMSCureSDK] Synced images.');\n      } else {\n        console.warn(`[CMSCureSDK] Failed to sync images: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('[CMSCureSDK] Error syncing images:', error.message);\n    }\n  }\n\n  /**\n   * Syncs colors from server\n   * @private\n   */\n  async #syncColors() {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/colors/${this.#config.projectId}`, {\n        headers: { 'Authorization': `Bearer ${this.#authToken}` }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.#cache['__colors__'] = data;\n        console.log('[CMSCureSDK] Synced colors.');\n      } else {\n        console.warn(`[CMSCureSDK] Failed to sync colors: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('[CMSCureSDK] Error syncing colors:', error.message);\n    }\n  }\n\n  /**\n   * Syncs a data store from server\n   * @private\n   */\n  async #syncStore(apiIdentifier) {\n    try {\n      const response = await fetch(`${this.#serverUrl}/api/sdk/store/${this.#config.projectId}/${apiIdentifier}`, {\n        headers: { 'Authorization': `Bearer ${this.#authToken}` }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.#dataStoreCache[apiIdentifier] = data;\n        console.log(`[CMSCureSDK] Synced data store: ${apiIdentifier}`);\n      } else {\n        console.warn(`[CMSCureSDK] Failed to sync data store ${apiIdentifier}: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(`[CMSCureSDK] Error syncing data store ${apiIdentifier}:`, error.message);\n    }\n  }\n}\n\n// Make SDK available globally for browser environments\nif (typeof window !== 'undefined') {\n  window.CMSCureSDK = CMSCureSDK;\n}\n\n// For CommonJS environments  \nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = CMSCureSDK;\n}\n\n// For AMD/RequireJS environments\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return CMSCureSDK;\n  });\n}\n\n// Export the class as default for ES modules (if supported)\nif (typeof exports !== 'undefined') {\n  exports.default = CMSCureSDK;\n}\n"],"names":["CMSCureSDK","EventTarget","static","config","authToken","cache","dataStoreCache","availableLanguages","currentLanguage","isInitialized","serverUrl","constructor","super","instance","console","log","this","loadStateFromStorage","configure","warn","projectId","apiKey","defaultLanguage","authenticateAndSync","error","getLanguage","setLanguage","language","includes","localStorage","setItem","dispatchEvent","CustomEvent","detail","reason","getAvailableLanguages","translation","key","tab","value","color","colorData","hex","image","dataStore","apiIdentifier","refresh","token","getItem","languages","currentLang","cacheData","dataStoreCacheData","JSON","parse","message","saveStateToStorage","stringify","response","fetch","method","headers","body","ok","Error","status","data","json","success","syncPromises","tabs","map","syncTab","stores","store","syncStore","syncColors","syncImages","Promise","all","Authorization","keys","Array","isArray","forEach","keyObj","values","Object","lang","window","module","exports"],"mappings":"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"}